name: Weekly Task Sync

on:
  schedule:
    # Run every Sunday at 2 AM UTC
    - cron: '0 2 * * 0'
  workflow_dispatch: # Allow manual triggering

permissions:
  contents: write
  actions: write

jobs:
  sync-tasks:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Configure Git
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

      - name: Check if taskAssignment branch exists
        id: check_branch
        run: |
          if git ls-remote --heads origin taskAssignment | grep -q taskAssignment; then
            echo "branch_exists=true" >> $GITHUB_OUTPUT
          else
            echo "branch_exists=false" >> $GITHUB_OUTPUT
          fi

      - name: Create taskAssignment branch if it doesn't exist
        if: steps.check_branch.outputs.branch_exists == 'false'
        run: |
          git checkout -b taskAssignment
          echo "[]" > 01_TaskManagement/data/tasks.json
          echo "[]" > 01_TaskManagement/data/task_assignments.json
          git add 01_TaskManagement/data/
          git commit -m "chore(tasks): initialize taskAssignment branch"
          git push origin taskAssignment
          echo "✅ Created taskAssignment branch"

      - name: Sync task files from taskAssignment to main
        if: steps.check_branch.outputs.branch_exists == 'true'
        run: |
          # Fetch the taskAssignment branch
          git fetch origin taskAssignment
          
          # Create data directory if it doesn't exist
          mkdir -p 01_TaskManagement/data
          
          # Copy task files from taskAssignment branch
          git show taskAssignment:01_TaskManagement/data/tasks.json > 01_TaskManagement/data/tasks.json || echo "[]" > 01_TaskManagement/data/tasks.json
          git show taskAssignment:01_TaskManagement/data/task_assignments.json > 01_TaskManagement/data/task_assignments.json || echo "[]" > 01_TaskManagement/data/task_assignments.json
          
          # Check if there are changes
          if git diff --quiet 01_TaskManagement/data/; then
            echo "No changes to sync"
            echo "sync_needed=false" >> $GITHUB_ENV
          else
            echo "Changes detected, syncing..."
            echo "sync_needed=true" >> $GITHUB_ENV
          fi

      - name: Commit and push changes
        if: env.sync_needed == 'true'
        run: |
          git add 01_TaskManagement/data/
          
          # Create detailed commit message
          TASK_COUNT=$(jq length 01_TaskManagement/data/tasks.json)
          ASSIGNMENT_COUNT=$(jq length 01_TaskManagement/data/task_assignments.json)
          
          git commit -m "chore(tasks): weekly sync from taskAssignment

          📊 Sync Summary:
          - Tasks: ${TASK_COUNT}
          - Assignments: ${ASSIGNMENT_COUNT}
          - Synced: $(date -u '+%Y-%m-%d %H:%M:%S UTC')
          
          🤖 Generated with [Claude Code](https://claude.ai/code)
          
          Co-Authored-By: Claude <noreply@anthropic.com>"
          
          git push origin main
          
          echo "✅ Successfully synced task data to main branch"

      - name: Generate sync report
        run: |
          echo "## 📋 Weekly Task Sync Report" >> $GITHUB_STEP_SUMMARY
          echo "**Date:** $(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_STEP_SUMMARY
          echo "**Branch:** taskAssignment → main" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ env.sync_needed }}" == "true" ]; then
            TASK_COUNT=$(jq length 01_TaskManagement/data/tasks.json)
            ASSIGNMENT_COUNT=$(jq length 01_TaskManagement/data/task_assignments.json)
            
            echo "### ✅ Sync Completed" >> $GITHUB_STEP_SUMMARY
            echo "- **Tasks synced:** ${TASK_COUNT}" >> $GITHUB_STEP_SUMMARY
            echo "- **Assignments synced:** ${ASSIGNMENT_COUNT}" >> $GITHUB_STEP_SUMMARY
            
            # Count tasks by status
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### 📊 Task Status Breakdown" >> $GITHUB_STEP_SUMMARY
            if [ -f "01_TaskManagement/data/tasks.json" ] && [ -s "01_TaskManagement/data/tasks.json" ]; then
              jq -r '.[] | .status' 01_TaskManagement/data/tasks.json | sort | uniq -c | while read count status; do
                echo "- **${status}:** ${count}" >> $GITHUB_STEP_SUMMARY
              done
            fi
            
            # Count assignments by status
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### 👥 Assignment Status Breakdown" >> $GITHUB_STEP_SUMMARY
            if [ -f "01_TaskManagement/data/task_assignments.json" ] && [ -s "01_TaskManagement/data/task_assignments.json" ]; then
              jq -r '.[] | .status' 01_TaskManagement/data/task_assignments.json | sort | uniq -c | while read count status; do
                echo "- **${status}:** ${count}" >> $GITHUB_STEP_SUMMARY
              done
            fi
          else
            echo "### ℹ️ No Changes" >> $GITHUB_STEP_SUMMARY
            echo "No task data changes detected since last sync." >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "---" >> $GITHUB_STEP_SUMMARY
          echo "*Next sync: $(date -d 'next Sunday 2:00' -u '+%Y-%m-%d %H:%M:%S UTC')*" >> $GITHUB_STEP_SUMMARY